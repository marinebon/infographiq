[["index.html", "Guide to Infographiq Chapter 1 Introduction", " Guide to Infographiq Ben Best, Jai Ranganathan 2021-06-25 Chapter 1 Introduction This document is a guide to using the Infographiq method for displaying data in a user-friendly way. The Infographiq method uses a combination of Javascript and R to produce clickable art that acts as an interface for users to access scientific data. An illustration of the Infographiq method can be seen below. This guide details how to prepare: an Infographiq-ready image, the “modal windows” in which data is shown, the link table that connects the image with the modal windows, a web page to embed an Infographiq-enabled image. You can find a demonstration of Infographiq, showing many of the options available with the associated Javascript library, here. Infographiq can also display data in modal window form via a user-clickable table. In this demonstration table, click on any row to see the associated modal window. "],["getting-started.html", "Chapter 2 Getting Started 2.1 The basics of Javascript 2.2 Running Javascript on your own machine", " Chapter 2 Getting Started To use the Infographiq approach, you’ll need a couple of things: A code editor. We recommend Sublime Text, but there are lots of great choices. A basic understanding of how HTML works. For a refresher, check out this great tutorial series. A basic understanding of Javascript, as the core Infographiq functionality works through this language. If you don’t know any Javascript, don’t panic! Further down on this page, you’ll find a cheat sheet to get you up to speed. Vector graphics software. The images used by Infographic must be in vector form and, therefore, you’ll need vector graphics software. We provide instructions in this guide for two vector graphics packages: Adobe Illustrator (requires a paid subscription) and Inkscape (free). An understanding of how to run Javascript locally from your own computer. Don’t fret if you don’t know: we get into it on this page. The example folder for Infographiq, which provides a full working example that you can fiddle around with. We’ll be referring to this folder extensively in this guide and you can download a compressed version here. Just unzip the folder when you get it. 2.1 The basics of Javascript We’ll be providing a very fast pass through Javascript here, but for a more detailed tutorial, check this out. Javascript is used in html pages via the &lt;script&gt; tag. Using your handy-dandy code editor, take a look at the infographic.html file that is contained within the Infographic example folder that you just downloaded. There, you’ll see that a html page can draw upon Javascript in two ways. 1A. Loading an external Javascript library. Line 12 of the infographic.html file reads as follows: &lt;script src=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js&quot;&gt;&lt;/script&gt; This line loads in a bunch of Javascript code written elsewhere - which is known as a Javascript library. In this case, we’re loading in Bootstrap - a well-known Javascript library 1B. Writing Javascript code directly within a page. Lines 32-41 of the infographic.html file read as follows: &lt;script&gt; link_svg({ svg: &quot;illustrator_example.svg&quot;, csv: &quot;icon_link.csv&quot;, svg_id: &quot;svg1&quot;, toc_id: &quot;toc1&quot;, toc_style: &quot;sectioned_list&quot;, text_toggle: &quot;toggle_off&quot;, svg_filter: &quot;illustrator_example.svg&quot;}); &lt;/script&gt; Here, within the confines of the &lt;script&gt; tags, we’re directly writing some Javascript code. In this particular case, we’re calling a function called link_svg (more on this function later). You end a Javascript line with a semicolon. In the Javascript example for 1B above, this may seem like multiple lines of code. But it isn’t! Take a careful look at the end of the second-to-last line (the one starting with svg_filter). You’ll notice that there is a semicolon there. In fact, it is the only place in this code chunk where there is a semicolon. So, that means this whole chunk is actually just one line of code, so far as the Javascript is concerned. Why does this matter to you? It matters because a classic reason why Javascript code fails is because the programmer forgot to put semicolons in the right places (don’t let that happen to you). Javascript functions. A function is a simple way of calling upon a chunk of code that has been written elsewhere. In Javascript, the dead giveaway that a function is being called is a set of parentheses after some term (something like this: some_function(). So, for example in 1B above, you know link_svg is a function because you see link_svg( on the third line. You may be a bit confused though, because the closing parentheses only shows up several lines later (on the svg_filter line). What’s all the stuff in between the parentheses? All those things are values that are being fed into the function. For an example, check out the third line of 1B: svg: &quot;illustrator_example.svg&quot;, We see here a few things. There is a parameter in the function called svg and we are going to give that parameter the value “illustrator_example.svg”. Lastly, we are going to finish out with a comma, to let Javascript know that more values are coming. 2.2 Running Javascript on your own machine Since, Infographiq involves HTML files that contain Javascript, you’ll need the ability to run Javascript on your computer. You might think that, if you have a Javascript-containing HTML file saved on your machine, you can just open the file directly in a web browser. Unfortunately, this won’t work. To have the Javascript run, you’ll need to set up a local testing server on your computer (which is easier than it might sound!). Here are the instructions for how to do that. How do you know if it is working? In the example folder for Infographiq (which, again you can download a compressed version here), there is a file called infographic.html. If you have the local testing server running properly - and you open the page via the following URL in your browser: http://localhost:8000/infographic.html you should see something that matches what you see at this link. "],["image-creation.html", "Chapter 3 Creating an Infographiq image 3.1 Adobe Illustrator 3.2 Inkscape", " Chapter 3 Creating an Infographiq image Infographiq works with vector-based images that are set up in a very specific way. Here we provide instructions for two vector graphics packages: Adobe Illustrator (requires a paid subscription) and Inkscape (free). You’ll also need the example folder for Infographiq, which provides a full working example that you can fiddle around with. We’ll be referring to this folder extensively in this guide and you can download a compressed version here. Just unzip the folder when you get it. You can see the working example in action here. 3.1 Adobe Illustrator This guide assumes you have a basic knowledge of using Illustrator (here is a great series of tutorials). In particular, you’ll need to understand how layers work in Illustrator (and here’s a tutorial for that). In the Infographiq example folder, you’ll find a file called illustrator_example.ai. Open this file in Illustrator and you’ll see the following: If you check out the Layers tab for the image, you’ll see that the image is composed of three layers: This is the required layer order of an Infographiq image. 3.1.1 Layer organization text: This first layer is optional and, if present, must be called lower case “text”. This layer contains additional explanatory text and graphics for the image that the Infographiq Javascript can toggle on and off. To see this in action, click the “Text in image” button in the upper right of our Infographiq example. In the Layers panel, we can see that the “text” layer contains several elements: There are two essential things here: A. All of the elements are vector-based (nothing raster-based). If you happen to have raster-based elements in your image (or are not sure), we can tell you what to do about it in this section of this document: dealing with raster-based elements. B. None of the elements within this layer are named “text”. The following (where one of the elements is named text) is not allowed: icons. The second layer is required and contains all of the clickable elements in the image. This layer can be named anything, except for “text” or the name of any clickable element in the image. If you check out the Layers panel for “icons”, you’ll see that it contains five sublayers (chartexample1 through 5): Each of these sublayers defines a single clickable component of the image. The names of these sublayers should not contain spaces, commas, or be called “text”. All elements within the sublayers should be vector-based and not raster-based. If you happen to have raster-based elements in your image (or are not sure), we can tell you what to do about it in this section of this document: dealing with raster-based elements. Nothing should overlap on top of anything you want to be clickable. Each sublayer contains all of the elements for a single clickable icon. The elements in the sublayer, if named, should not have the same name as the sublayer itself. So, for example, the following won’t work (the element within chartexample1 is also called chartexample1): background_elements: an optional layer that contains all non-responsive elements of the image. This layer can be called anything (other than “text” or the name of a clickable sublayer). It is ignored by the Infographiq Javascript. 3.1.2 Dealing with raster-based elements How do I tell if something is raster or vector-based? One dead give-away that an image is raster-based is if the file is saved in a raster-based file format. You can determine the file format of a file by checking out the last few characters of the file name (the file extension). Some common raster-based file formats are (with their extensions): .gif (Graphic Interchange Format) .jpg or .jpeg (Joint Photographic Experts Group) .png (Portable Network Graphics) .psd (Photoshop Document) .tiff (Tag Image File Format) Checking the file extension isn’t a fool-proof system though. Just because an image is saved in some other format than those above doesn’t mean that it isn’t a raster-based image. So, how can you know for sure? Well, open the image up in Illustrator and take a close look at the Layer panel. If the image is raster-based, it will say &lt;Image&gt; under the appropriate layer (be sure to click the arrow just to the left of the layer name to see what it contains). See below for an example: Converting a raster to a vector If you have some raster-based elements that you’d like to include in your Infographiq image, Illustrator has got you covered. You’ll just need to convert those elements into vectors and here’s how to do that: Select image (from Layers; or Select All from menu). From the menu, select Object &gt; Image Trace &gt; Make and Expand. Delete (trash icon in Layers menu) or Unite/Merge (in Pathfinder menu) the selected layers until you achieve the desired simplified icon result. 3.1.3 Saving the image To be used by Infographiq, the file must be exported in svg format. To do so: From the menu, click: File &gt; Export &gt; Export As. In the following screen, select svg format. Be sure to click “Use Artboards”. In the final screen that pops up, be sure to set Object IDs to “Layer Names”, as follows: The default for Illustrator is to add an “01” to your svg file name (so, “example.svg” becomes “example01.svg”. Change the file name back to your desired choice. 3.2 Inkscape This guide assumes you have a basic knowledge of using Inkscape (here is a great series of tutorials). In particular, you’ll need to understand how layers work in Inkscape (and here’s a tutorial for that). In the Infographiq example folder, you’ll find a file called inkscape_example.svg. Open this file in Inkscape and you’ll see the following: If you check out the Layers panel for the image, you’ll see the following: This is the required layer order of an Inkscape image. 3.2.1 Layer organization text: This first layer is optional and, if present, must be called lower case “text”. This layer contains additional explanatory text and graphics for the image that the Infographiq Javascript can toggle on and off. To see this in action, click the “Text in image” button in the upper right of our Infographiq example. The essential thing here is that all of the elements are vector-based (nothing raster-based). If you happen to have raster-based elements in your image (or are not sure), we can tell you what to do about it in this section of this document: dealing with raster-based elements. icons. The second layer is required and contains all of the clickable elements in the image. This layer can be named anything, except for “text” or the name of any clickable element in the image. If you check out the Layers panel for “icons” (see image just above), you’ll see that it contains five sublayers (chartexample1 through 5). Each of these sublayers defines a single clickable component of the image. The names of these sublayers should not contain spaces, commas, or be called “text”. All elements within the sublayers should be vector-based and not raster-based. If you happen to have raster-based elements in your image (or are not sure), we can tell you what to do about it in this section of this document: dealing with raster-based elements. Nothing should overlap on top of anything you want to be clickable. Each sublayer contains all of the elements for a single clickable icon. background_elements: an optional layer that contains all non-responsive elements of the image. This layer can be called anything (other than “text” or the name of a clickable layer). It is ignored by the Infographiq Javascript. 3.2.2 Editing the layer XML In order for the Infographiq image to behave properly, you will need to edit the XML for the image. In order to do so, you’ll need to have two panels visible: Layers (to show from Menu, Layer &gt; Layers…) XML Editor (to show from Menu, Edit &gt; XML Editor…) Let’s zoom in on these panels for the image inkscape_example.svg: For each of your layers: Click the associated entry in the XML Editor (hint: the “inkscape:label” will match the layer name). In the box to the right, change the id to match the layer name. Select the “text” layer in the XML Editor. In the box to the right, click the red X by “display: inline” (thereby deleting that row). Note: in the example file inkscape_example.svg, the “display: inline” line has already been deleted. 3.2.3 Dealing with raster-based elements How do I tell if something is raster or vector-based? One dead give-away that an image is raster-based is if the file is saved in a raster-based file format. You can determine the file format of a file by checking out the last few characters of the file name (the file extension). Some common raster-based file formats are (with their extensions): .gif (Graphic Interchange Format) .jpg or .jpeg (Joint Photographic Experts Group) .png (Portable Network Graphics) .psd (Photoshop Document) .tiff (Tag Image File Format) Checking the file extension isn’t a fool-proof system though. Just because an image is saved in some other format than those above doesn’t mean that it isn’t a raster-based image. So, how can you know for sure? Well, open the image up in Inkscape and right click on it. If in the options you see “Image Properties…”, you’ve got a raster-based image on your hands (see image below). Converting a raster to a vector If you have some raster-based elements that you’d like to include in your Infographiq image, Inkscape has got you covered. You’ll just need to convert those elements into vectors and here’s a tutorial on how to do that. 3.2.4 Saving the image To be used by Infographiq, the file must be exported in svg format. Good news! Inkscape’s native file format is already svg. When you save the image, just be sure to save it in the format “Inkscape SVG (*.svg)”. "],["link-table.html", "Chapter 4 The link table 4.1 Table structure 4.2 Table columns", " Chapter 4 The link table The Infographiq method connects a clickable image with scientific data. Infographiq uses a table to know what data is to be associated with what parts of the image. This is shown in the image below (the gray box titled Table in the upper right of the image): In this section of the guide, we get into how to set up this “link table”. To get started, if you haven’t do so already, download the example folder and unzip it. In the example folder, you’ll find a file called “icon_link.csv”, which is the link table used by the example. Open icon_link.csv in whatever program you use for looking at tables. The first few lines look as follows: 4.1 Table structure The first line of the table must be the column header. The table must be saved in .csv (comma-separated values) format. The column order doesn’t matter. Each row refers to a single clickable icon in the image. The only required column is “icon”. All others are optional. 4.2 Table columns icon (required): the name of the layer in the image to be made clickable (the name must exactly match). So, in the case of the Infographiq example, the possibilities would be: chartexample1 chartexample2 chartexample3 chartexample4 chartexample5 These are the layer names of the clickable components of the image, as seen in this Layer panel from Adobe Illustrator. svg (optional): a single link table can be used for multiple Infographiq images. However, if doing so, we need a way to separate out the information for each image, which is what the svg column allows for. All rows to be grouped together as part of the same image should have the same value for svg (the value doesn’t have to be the image name). If the svg column is absent, then Infographiq will attempt to match all rows in the link table with a given Infographiq image (which is what you would want, if the table only refers to a single image). In the example table icon_link.csv, the only value for this column is “illustrator_example.svg”, which is functionally the same as not having the column at all (since all rows will be taken in). title (optional): the text that should appear on the image when the mouse is over the clickable element (move the mouse over the example image to see what this means). If there is no title column, then the name given in the “icon” column will show up on the image instead. link (optional): when a clickable element of an image is clicked, Infographiq loads an external HTML file above the image as an &lt;iframe&gt; (more here on what an &lt;iframe&gt; is). This external HTML file contains the data for the modal window. Other sections of this guide go into detail about the construction of these external HTML files, so we will skip that conversation here. For the purposes of this column, all that is needed is the link to the external HTML file, with both relative and absolute links allowed. In the case of the Infographiq example, all of the external HTML files are contained within the example folder, within a subfolder called “modals”. It is isn’t necessary for a modals subfolder to exist, but we recommend it for ease of organization. If the link column is absent, the Infographiq code will assume that the external HTML file is contained in the directory where the Infographiq-containing HTML file is located (so in the Infographiq example, if the link column was missing, the target directory would be “infographiq_example”, as that is where “infographic.html” is located). It will further assume that the external HTML file name is the icon name plus “.html” (so, for the first row of icon_link.csv, the assumed HTML file name would be “chartexample1.html”). section (optional): a method of separating the clickable elements by category. In the demonstration Example of Infographiq Functionality, if you select either Accordion or Sectioned List under “Text list type”, you’ll see that the clickable elements are separated by category in the list to the right. The “section” column is what allows this separation to occur, with all icons to be grouped being given the same value for “section”. In the main Infographiq example used in this guide, there are two categories for “section” in the icon_link.csv table: “Category 1” and “Category 2”. If the section column is missing from the table, then the Accordion and Sectioned List options are not allowed for “Text list type”. not_modal (optional): a method for directly linking to an external HTML resource, as opposed to loading it above the image as a modal window. Two values are allowed in this column: T: link directly to an external HTML resource, based upon the value in the “link” column (not a modal window). F: external HTML file opens above Infographiq image, based upon the value in the “link” column (modal window). For an illustration on how this works, in the main Infographiq example, if you click on the yellow circle, it will take you directly to the main site for the National Oceanic and Atmospheric Administration. The reason that it does so is that, in the relevant row of icon_link.csv (the last row), the value for not_modal is T. If the not_modal column is absent, then all external HTML files listed in the link column will open as modal windows above the Infographiq image. "],["the-infographiqjs-javascript.html", "Chapter 5 The InfographiqJS Javascript 5.1 Dependencies 5.2 Example 5.3 Function parameters", " Chapter 5 The InfographiqJS Javascript The Infographiq method connects a clickable image with scientific data, using a Javascript library called InfographiqJS (located here) as shown in the image below: In this section of the guide, we get into how InfographiqJS works to create the clickable image. Within the InfographiqJS library, there is a function called link_svg(): this is the function used to generate the interactive image. You can see many of the options available via link_svg() at this demonstration page. 5.1 Dependencies In order for link_svg() to work, it relies upon other Javascript and CSS libraries that must be loaded prior to the InfographiqJS Javascript being loaded. These other libraries are known as the dependencies for InfographiqJS. link_svg Dependencies: jQuery (version 1.9.1). D3 (version 5). Font Awesome (version 4.7). Bootstrap (version 3.3.5). Note that Bootstrap, which is a framework used for layout, is more of a pseudo-dependency for InfographiqJS. InfographiqJS does not strictly require Bootstrap to run, but we highly recommend its use for layout and our examples have Bootstrap embedded. 5.2 Example To get started, if you haven’t do so already, download the example folder and unzip it. In the example folder, you’ll find a file called “infographic.html”, which you can also see here. Open infographic.html in your handy-dandy code editor. Lines 9-15 in the &lt;head&gt; section of the HTML, which read in as follows, load in the dependencies for InfographiqJS. &lt;script src=&quot;https://code.jquery.com/jquery-1.9.1.min.js&quot; integrity=&quot;sha256-wS9gmOZBqsqWxgIVgA8Y9WcQOa7PgSIX+rPA0VL2rbQ=&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt; &lt;script src= &quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://d3js.org/d3.v5.min.js&quot;&gt;&lt;/script&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.css&quot; integrity=&quot;sha512-5A8nwdMOWrSz20fDsjczgUidUBR8liPYU+WymTZP1lmY9G6Oc7HlZv156XqnsgNUzTyMefFTcsFH/tnJE/+xBg==&quot; crossorigin=&quot;anonymous&quot; /&gt; Lines 31-41 of the HTML are where we load in the InfographiqJS Javascript and CSS. We also call the InfographiqJS function link_svg(). This placement is very important: the InfographiqJS Javascript, CSS, and link_svg() must show up at the bottom of the &lt;body&gt; of the HTML. &lt;script src=&#39;https://marinebon.org/infographiqJS/libs/infographiq_latest/infographiq.js&#39;&gt;&lt;/script&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://marinebon.org/infographiqJS/libs/infographiq_latest/infographiq.css&quot;&gt; &lt;script&gt; link_svg({ svg: &quot;illustrator_example.svg&quot;, csv: &quot;icon_link.csv&quot;, svg_id: &quot;svg1&quot;, toc_id: &quot;toc1&quot;, toc_style: &quot;sectioned_list&quot;, text_toggle: &quot;toggle_off&quot;, svg_filter: &quot;illustrator_example.svg&quot;}); &lt;/script&gt; 5.3 Function parameters There are multiple parameters for the function link_svg(), which are detailed here: svg (required): the file path of the infographic image, with both relative and absolute links allowed. The details of how to create the infographic image in a Infographiq-compliant way can be found elsewhere in this guide. In the example infographic.html, the svg parameter equals “illustrator_example.svg”. csv (required): the file path of the link table, with both relative and absolute links allowed. The details of how to create the link table in a Infographiq-compliant way can be found elsewhere in this guide. In the example infographic.html, the csv parameter equals “icon_link.csv”. svg_id (optional): the id of the &lt;div&gt; tag in the HTML file where the infographic image should be placed. This parameter defaults to the value ‘svg’. In the example infographic.html, the svg_id parameter is set to “svg1”, which can be found in the HTML file on line 22. toc_id (optional): the id of the &lt;div&gt; tag in the HTML file where the table of contents should be placed. In the demo page, the table of contents can be seen to the right of the infographic (the red box in the image below). This image defaults to the value ‘toc’. In the example infographic.html, the toc_id parameter is set to “toc1”, which can be found in the HTML file on line 25. hover_color (optional): the color of the clickable elements in the image when they are selected. Any CSS-compliant color is allowed (see here for all of the possibilities). The default value for hover_color is ‘yellow’. To see the effect of changing hover_color, change the value for “Outline color on infographic” in the demo. width (optional): the width of the infographic image, with a percentage being required. The default value for width is ‘100%’. height (optional): the height of the infographic image, with a percentage being required. The default value for height is ‘100%’. modal_url_pfx (optional): a URL prefix to add to the modal window links provided in the link table. An example value for modal_url_pfx would be ‘https://www.noaa.gov/fisheries/’. toc_style (optional): the style of the table of contents. Allowable values are: ‘accordion’, ‘list’, ‘none’, and ‘sectioned_list’. The default value is ‘list’. To see the effect of changing toc_style, change the value for “Text list type” in the demo. colored_sections (optional): whether different categories of clickable elements in the infographic should have different hover colors. Allowable values are true and false (note: no quotation marks). The default value is false. If colored_sections is set to true, the hover_color parameter is superseded by the parameter section_colors. This parameter should only be set to true if the “section”column exists in the link table. To see the effect of changing colored_sections, change the value for “Colored section headers” in the demo. section_colors (optional): the list of colors to be used for different categories of clickable elements. The value expected is an array of CSS-compliant colors. The default value for section_colors is [‘LightGreen’, ‘MediumOrchid’, ‘Orange’]. section_colors is only used if colored_sections is set to true. The number of array elements in section_colors does not have to match the number of sections. If there are fewer array elements than sections, then the array elements are repeated over sections. If there are more array elements than sections, the extra array elements are ignored. To see the effect of changing section_colors, change the value for “Colored section headers” in the demo. text_toggle (optional): the type of text toggle to be displayed above the table of contents. Allowable values are: ‘none’, ‘toggle_off’, and ‘toggle_on’. The default value is ‘none’. To see the effect of changing text_toggle, change the value for “Explanatory text toggle” in the demo. svg_filter (optional): if the link table contains the data for multiple infographic images, which rows of the link table should be included. This parameter should only be set if the “svg” column exists in the link table. Only rows in the link table where the “svg” column value matches svg_filter will be included. "],["html-layout-with-bootstrap.html", "Chapter 6 HTML Layout with Bootstrap", " Chapter 6 HTML Layout with Bootstrap The Infographiq approach uses Bootstrap for HTML page layout. Bootstrap is a widely-used Javascript library for controlling layout. In this section of the guide, we give a brief overview to how Bootstrap works, within the Infographiq context. For a much more extensive Bootstrap tutorial, click here. To get started, if you haven’t do so already, download the example folder and unzip it. In the example folder, you’ll find a file called “infographic.html”, which you can also see here. Open infographic.html in your handy-dandy code editor. Lines 18-28 in the &lt;body&gt; section of the HTML read as follows: &lt;!-- define bootstrap layout that will contain the infographic --&gt; &lt;div class=&quot;container-fluid&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-9&quot;&gt; &lt;div id = &quot;svg1&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;col-md-3&quot;&gt; &lt;ul id=&quot;toc1&quot;&gt;&lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; This section of the HTML uses Bootstrap to define the layout within which the Infographiq infographic will be placed. Let’s go through it line by line. &lt;div class=&quot;container-fluid&quot;&gt; First, let’s define the container that will hold the Infographiq content. For this, we use the Bootstrap class “container-fluid”, which indicates that the container should take up the full width of the viewport (which is usually just the width of the browser window). &lt;div class=&quot;row&quot;&gt; Second, we’ll use the Bootstrap class “row” to define the container that will hold the Infographiq content. Bootstrap uses a grid system of columns and rows to control layout. Here, we are indicating that the Infographiq content will all be in a single row. &lt;div class=&quot;col-md-9&quot;&gt; Third, let’s define the container that will hold the Infographiq image with the Bootstrap class “col-md-9”. There are three components to this class. The “col” component at the beginning indicates that this class has something to do with Bootstrap columns. The “9” component specifies that this container is to be 9 columns wide. Bootstrap allows a maximum width of 12 columns, so therefore 9/12 of the width of the row (or 75%) is allocated for the Infographiq image. The “md” component stands for “medium”. It refers to the width of the screen on which the page is being viewed. If the screen is equal to or greater than 992 pixels wide, then everything in the row will be viewed in a single horizontal row. If the screen is smaller than that, then the stuff in the row will be stacked on top of each other. The reason for doing this is that, on small screens, legibility will be better if the elements of the page are stacked vertically instead of horizontally. &lt;div id = &quot;svg1&quot;&gt;&lt;/div&gt; Fourth, let’s create the container where the InfographiqJS Javascript will position the image. In the InfographiqJS function link_svg() further down on the HTML page ‘infographic.html’, we’ll provide ‘svg1’ as the value for the parameter svg_id. In another section of this guide, we go into much more detail into link_svg(). &lt;div class=&quot;col-md-3&quot;&gt; Fifth, we define the container that will hold the Infographiq table of contents with the Bootstrap class “col-md-3”. This class works very similarly to “col-md-9” defined earlier, except that this container will be three columns wide. As there are a total of 12 columns to work with, this container will take up 25% of the width of the row. &lt;ul id=&quot;toc1&quot;&gt;&lt;/ul&gt; Sixth, we create an unordered list where the InfographiqJS Javascript will position the table of contents. In the InfographiqJS function link_svg() further down on the HTML page ‘infographic.html’, we’ll provide ‘toc1’ as the value for the parameter toc_id. In another section of this guide, we go into much more detail into link_svg(). "],["modal-windows.html", "Chapter 7 Modal windows", " Chapter 7 Modal windows With the Infographiq method, when a clickable element of an image is clicked, a “modal window” containing data appears on the screen (see image below). To see examples of modal windows in action, check out the Infographiq demonstration page and click on any element of the image that highlights. In this section of the guide, we discuss how to create these modal windows. To get started, if you haven’t do so already, download the example folder and unzip it. In the example folder, you’ll find a subfolder called “modals” that contains several HTML files (see image below). These HTML files comprise a range of types of modal windows. Add more stuff here. "]]
